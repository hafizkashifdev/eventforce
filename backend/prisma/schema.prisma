// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  name          String?
  role          Role     @default(CUSTOMER)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  bookings      Booking[]
  payments      Payment[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Vehicle {
  id          String   @id @default(uuid())
  name        String
  description String?
  seats       Int?
  priceCents  Int  // base price per unit/time in cents
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  bookings    Booking[]

  @@map("vehicles")
}

model Booking {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId       String
  startAt         DateTime
  endAt           DateTime
  totalCents      Int
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  payment         Payment?

  @@map("bookings")
}

model Payment {
  id                   String   @id @default(uuid())
  booking              Booking? @relation(fields: [bookingId], references: [id])
  bookingId            String?
  amountCents          Int
  currency             String  @default("usd")
  stripePaymentIntent  String?  @unique
  status               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("payments")
}
